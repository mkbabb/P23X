Test date: 04/04/21  02:07:35 
The number of times you used the grading program is 5 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
Linkhll Grading System Version 4.0
Student: Last=Babb                 First=Mike                 Type=Individual          
Grading and testing history log
       User Test.    Date: 04/04/21  01:38:19  user_test    testout      
   *** Grading Run.  Date: 04/04/21  01:38:44 
       User Test.    Date: 04/04/21  01:42:15  user_test    testout      
       User Test.    Date: 04/04/21  01:43:44  user_test    testout      
       User Test.    Date: 04/04/21  01:45:15  user_test    testout      
       User Test.    Date: 04/04/21  01:46:46  user_test    testout      
       User Test.    Date: 04/04/21  01:52:56  user_test    testout      
   *** Grading Run.  Date: 04/04/21  01:53:00 
       User Test.    Date: 04/04/21  02:01:50  user_test    testout      
   *** Grading Run.  Date: 04/04/21  02:01:54 
   *** Grading Run.  Date: 04/04/21  02:06:11 
   *** Grading Run.  Date: 04/04/21  02:07:35 

++ Grade ++   60 = Points earned for correct answers.

+  Your executed instruction count per call is = 00017
+   
+  Target instructions executed per call is:
+  20 points 01 - 18 
+  15 points 19 - 20 
+  10 points 21 - 22 
+   5 points 23 - 24 
+   0 points 25+      
+                     
++ Grade ++   20 = Points earned for code executed efficiency!

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0018 The program header format is adequate. 
DOCHB-0.71 Use of code block headers is adequate. 
DOCLC-1.00 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++  100 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
     7  = Number of user tests.                                  
     5  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC<6&}xC6&k~C86&juiC86&zuzC766&Zkyz&jgzk@&6:56:587&&68@6=@9;&

Building the file linkhll.ans for electronic submission...

;-----------------------------------------------------------
; Program: Linkhll
;
; Function: Function to link a high level language, C, 
;           and thereupon complete the following task,
;           find the subset maxima of cardinality 2,
;           and perform a multiplicaiton reduction withal.
;           
;           For it is linked,
;           That is to say,
;           Wherefore doth thinked,
;           Surely as night cometh day.
;
; Owner: D.v.P.
;
; Date:
;       11/21/2016   Original Version
;---------------------------------------
         .model    small               ; small sz.
         .8086                         ; 8086 set.
         public    _linkhll            ; public funx.
;---------------------------------------

;---------------------------------------
    .code
;---------------------------------------
; Code Segment; scilicet, the segment wherein code is executed
;---------------------------------------
_linkhll:
    push    bp                          ; save bp.             
    mov bp, sp                          ; we only care about the sp.
    mov ax, [bp+4]                      ; set ax to val 1.
    mov bx, [bp+6]                      ; set bx to val 2.
;---------------------------------------
cmp0:               
    cmp ax, bx                          ; ax > bx?
    jae  cmp1                           ; jmp if so.
    xchg ax, bx                         ; else, exchange.
;---------------------------------------
; The first compare, wherein a loop is formed;
; Compared, intelligibly to the spokes of the wheel,
; exaltant in its grand allegory.
;---------------------------------------
cmp1:
    cmp bx, [bp+8]                      ; bx > val 3?
    jae cmp2                            ; jmp if so.
    xchg bx, [bp+8]                     ; else, exchange, but we can't gurantee that ax was the max val.
    jmp cmp0                            ; so we check again, jmping to cmp0.
;---------------------------------------
; The second compare; penultima.
;---------------------------------------
cmp2:                   
    cmp bx, [bp+10]                     ; bx > val 3?
    jae done                            ; jmp if so.
    mov bx, [bp+10]                     ; else, we've already excluded vals 1 and 2, so the only option 4.
;---------------------------------------
; Finale ultimo: viva allegro con brio con giocoso
;---------------------------------------
done:
    mul bx                              ; mul is commutative, so we mul bx.
    pop bp                              ; restore bp.
    ret                                 ; the ret.
    end                                 ; fin.
;---------------------------------------

