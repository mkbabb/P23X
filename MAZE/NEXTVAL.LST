Microsoft (R) Macro Assembler Version 6.11		    03/22/21 16:08:13
nextval.asm						     Page 1 - 1


				;---------------------------------------------------------------------
				; Program:   nextval subroutine
				;
				; Function:  Find next mouse move in an array 15 by 30.
				;            We can move into a position if its contents is blank ( 20h ).
				;
				; Input:     Calling sequence is:
				;            x    pointer   si
				;            y    pointer   di
				;            dir  pointer   bx
				;            maze pointer   bp
				;
				; Output:    x,y,dir modified in caller's data segment
				;
				; Owner:     Dana A. Lasher, Mike Babb (mbabb), Sanjana Cheerla (scheerl)
				;
				; Date:      Update Reason
				; --------------------------
				; 11/06/2016 Original version
				;---------------------------------------
				         .model    small                              ;64k code and 64k data
				         .8086                                        ;only allow 8086 instructions
				         public    nextval                            ;allow extrnal programs to call
				;---------------------------------------
				; data segment 
				;---------------------------------------
 0000				         .data                                        ;data segment
 0000 1E			    p0 db 30                                          ;number of columns (30)
				;---------------------------------------
				; code segment starts
				;---------------------------------------           
 0000				         .code                       
				;---------------------------------------
				; push data onto stack
				;---------------------------------------  
 0000				nextval:                                              ;Start the stack
 0000  55			    push bp                                           ;push base pointer
 0001  50			    push ax                                           ;push ax
				;---------------------------------------  
				; offset = (*y-1)*30 + (*x-1);
				;--------------------------------------- 
 0002				calc_offset:                                          ;calculate offset
 0002  33 C0			    xor ax, ax                                        ;make sure ax is 0
 0004  02 04			    add al, BYTE PTR ds:[si]                          ;move the y value into al

 0006  03 E8			    add bp, ax                                        ;add ax into bp

 0008  8A 05			    mov al, ds:[di]                                   ;move the x value into al
 000A  48			    dec ax                                            ;decrement x

 000B  F6 2E 0000 R		    imul [p0]                                         ;multiply by num columns (30)

 000F  03 E8			    add bp, ax                                        ;add x value into bp
				;---------------------------------------  
				; if (*direction == 1) goto testn;
				; if (*direction == 2) goto teste;
				; if (*direction == 3) goto tests;
				; if (*direction == 4) goto testw;
				;---------------------------------------  
 0011				nextval_main:                                        ;decide next value to go to
 0011  80 3F 03			    cmp BYTE PTR ds:[bx], 3                          ;see if bx is pointing west
 0014  74 25			    je tests                                         ;if west, go to south
 0016  77 32			    ja testw                                         ;if north go to west
 0018  80 3F 02			    cmp BYTE PTR ds:[bx], 2                          ;see if bx is pointting south
 001B  74 0F			    je teste                                         ;if south go east, else go north
				;---------------------------------------  
				; if (maze[offset-30] == ' ')
				;     {
				;     *y = *y-1;
				;     *x = *x;
				;     *direction = 4;
				;     return;
				;     }
				;---------------------------------------  
 001D				testn:
 001D  3E: 80 7E E1 20		    cmp BYTE ptr ds:[bp - 1 - 30], ' '               ;compare to see if north is empty
 0022  75 08			    jne teste                                        ;if not empty go east
 0024  83 2D 01			    sub WORD PTR ds:[di], 1                          ;decrement y
 0027  C6 07 04			    mov BYTE ptr ds:[bx], 4                          ;set travel direction to north
 002A  EB 2B			    jmp next_val_exit                                ;exit
				;---------------------------------------  
				; if (maze[offset+1] == ' ')
				;     {
				;     *y = *y;
				;     *x = *x+1;
				;     *direction = 1;
				;     return;
				;     }
				;---------------------------------------  
 002C				teste:
 002C  3E: 80 7E 00 20		    cmp BYTE ptr ds:[bp - 1 + 1], ' '               ;compare to see if east is empty
 0031  75 08			    jne tests                                       ;if not empty go south
 0033  83 04 01			    add WORD PTR ds:[si], 1                         ;increment y
 0036  C6 07 01			    mov BYTE ptr ds:[bx], 1                         ;set travel direction to east
 0039  EB 1C			    jmp next_val_exit                               ;exit
				;---------------------------------------  
				; if (maze[offset+30] == ' ')
				;     {
				;     *y = *y+1;
				;     *x = *x;
				;     *direction = 2;
				;     return;
				;     }
				;---------------------------------------  
 003B				tests:
 003B  3E: 80 7E 1D 20		    cmp BYTE ptr ds:[bp - 1 + 30], ' '               ;compare to see if south is empty
 0040  75 08			    jne testw                                        ;if not empty go west
 0042  83 05 01			    add WORD PTR ds:[di], 1                          ;decrement x
 0045  C6 07 02			    mov BYTE ptr ds:[bx], 2                          ;set travel direction to south
 0048  EB 0D			    jmp next_val_exit                                ;exit
				;---------------------------------------  
				; if (maze[offset-1] == ' ')
				;     {
				;     *y = *y;
				;     *x = *x-1;
				;     *direction = 3;
				;     return;
				;     }
				; goto testn;
				;---------------------------------------  
 004A				testw:
 004A  3E: 80 7E FE 20		    cmp BYTE ptr ds:[bp - 1 - 1], ' '               ;compare to see if west is empty
 004F  75 CC			    jne testn                                       ;if not empty go north
 0051  83 2C 01			    sub WORD PTR ds:[si], 1                         ;increment x
 0054  C6 07 03			    mov BYTE ptr ds:[bx], 3                         ;set travel direction to west
				;---------------------------------------  
				; remove data from stack
				;---------------------------------------  
 0057				next_val_exit:                                      ;exit loop
 0057  58			    pop ax                                          ;pop ax
 0058  5D			    pop bp                                          ;pop np
 0059  C3			    ret                                             ;return
				;---------------------------------------  
				; end loop
				;---------------------------------------  
 005A				exit:
				    end                               ;add x value into bp
Microsoft (R) Macro Assembler Version 6.11		    03/22/21 16:08:13
nextval.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 0001	  Word	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	16 Bit	 005A	  Word	  Public  'CODE'	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
calc_offset  . . . . . . . . . .	L Near	 0002	  _TEXT	
exit . . . . . . . . . . . . . .	L Near	 005A	  _TEXT	
next_val_exit  . . . . . . . . .	L Near	 0057	  _TEXT	
nextval_main . . . . . . . . . .	L Near	 0011	  _TEXT	
nextval  . . . . . . . . . . . .	L Near	 0000	  _TEXT	Public
p0 . . . . . . . . . . . . . . .	Byte	 0000	  _DATA	
teste  . . . . . . . . . . . . .	L Near	 002C	  _TEXT	
testn  . . . . . . . . . . . . .	L Near	 001D	  _TEXT	
tests  . . . . . . . . . . . . .	L Near	 003B	  _TEXT	
testw  . . . . . . . . . . . . .	L Near	 004A	  _TEXT	

	   0 Warnings
	   0 Errors
