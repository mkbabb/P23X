Test date: 03/22/21  16:09:39 
The number of times you used the grading program is 6 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
Maze Grading System Version 4.0
Student: St#1=Babb                 St#2t=Cheerla              Type=Team                
Grading and testing history log
       User Test.    Date: 03/21/21  22:42:53  maze.01      -            
       User Test.    Date: 03/21/21  22:45:44  r            -            
       User Test.    Date: 03/21/21  22:50:23  maze.01      -            
       User Test.    Date: 03/21/21  22:51:00  maze.01      -            
       User Test.    Date: 03/21/21  22:51:33  r            -            
       User Test.    Date: 03/21/21  22:51:48  r            -            
       User Test.    Date: 03/21/21  22:52:20  r            -            
       User Test.    Date: 03/21/21  22:56:48  r            -            
       User Test.    Date: 03/21/21  23:17:14  maze.01      -            
       User Test.    Date: 03/21/21  23:18:27  maze.01      -            
       User Test.    Date: 03/21/21  23:18:59  r            -            
       User Test.    Date: 03/21/21  23:22:21  r            -            
       User Test.    Date: 03/21/21  23:23:41  r            -            
       User Test.    Date: 03/21/21  23:24:08  r            -            
       User Test.    Date: 03/21/21  23:31:50  maze.01      -            
       User Test.    Date: 03/21/21  23:36:22  r            -            
       User Test.    Date: 03/21/21  23:40:47  r            -            
       User Test.    Date: 03/21/21  23:42:22  r            -            
       User Test.    Date: 03/21/21  23:43:53  r            -            
   *** Grading Run.  Date: 03/21/21  23:45:16 
       User Test.    Date: 03/21/21  23:50:30  r            -            
       User Test.    Date: 03/21/21  23:54:24  r            -            
       User Test.    Date: 03/21/21  23:55:25  r            -            
   *** Grading Run.  Date: 03/21/21  23:57:53 
       User Test.    Date: 03/21/21  24:17:20  r            -            
       User Test.    Date: 03/21/21  24:19:05  r            -            
       User Test.    Date: 03/21/21  24:21:56  r            -            
       User Test.    Date: 03/21/21  24:25:12  r            -            
       User Test.    Date: 03/21/21  24:26:20  r            -            
       User Test.    Date: 03/21/21  24:32:56  r            -            
       User Test.    Date: 03/21/21  24:49:48  r            -            
       User Test.    Date: 03/22/21  00:51:53  r            -            
       User Test.    Date: 03/22/21  00:53:08  r            -            
       User Test.    Date: 03/22/21  01:08:22  r            -            
       User Test.    Date: 03/22/21  01:12:14  r            -            
       User Test.    Date: 03/22/21  01:12:58  r            -            
   *** Grading Run.  Date: 03/22/21  01:14:15 
       User Test.    Date: 03/22/21  01:19:05  r            -            
   *** Grading Run.  Date: 03/22/21  01:20:19 
       User Test.    Date: 03/22/21  01:23:56  r            -            
   *** Grading Run.  Date: 03/22/21  01:25:10 
       User Test.    Date: 03/22/21  16:08:26  r            -            
   *** Grading Run.  Date: 03/22/21  16:09:39 
Testing against the nextval specification
Test completed okay
Testing against non symetrical maze
Test completed okay
Testing against a set of random mazes
Test completed okay
Testing for correct operation and efficiency
Building the maze....
Congratulations! Your mouse has traversed the maze.
 
++ Grade ++   50 = Points earned for correct answers.
Your executed instruction count = 000004875

++ Grade ++   15 = Points earned for code executed efficiency.
Target executed: 15 = 0-4999  10 = 5000-5249  5 = 5250-5499  0 = 5500+ 

++ Grade ++   15 = Points for code written. Your count is:  36.
Target written : 15 = 00-40  10 = 41-45  5 = 46-50  0 = 51+

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0020 The program header format is adequate. 
DOCHB-1.11 Use of code block headers is adequate. 
DOCLC-1.00 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++  100 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
    37  = Number of user tests.                                  
     6  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC;6&}xC6&k~C7;&juiC86&zuzC766&Zkyz&jgzk@&69588587&&7<@6?@9?&



Building the file maze.ans for electronic submission...

;---------------------------------------------------------------------
; Program:   nextval subroutine
;
; Function:  Find next mouse move in an array 15 by 30.
;            We can move into a position if its contents is blank ( 20h ).
;
; Input:     Calling sequence is:
;            x    pointer   si
;            y    pointer   di
;            dir  pointer   bx
;            maze pointer   bp
;
; Output:    x,y,dir modified in caller's data segment
;
; Owner:     Dana A. Lasher, Mike Babb (mbabb), Sanjana Cheerla (scheerl)
;
; Date:      Update Reason
; --------------------------
; 11/06/2016 Original version
;---------------------------------------
         .model    small                              ;64k code and 64k data
         .8086                                        ;only allow 8086 instructions
         public    nextval                            ;allow extrnal programs to call
;---------------------------------------
; data segment 
;---------------------------------------
         .data                                        ;data segment
    p0 db 30                                          ;number of columns (30)
;---------------------------------------
; code segment starts
;---------------------------------------           
         .code                       
;---------------------------------------
; push data onto stack
;---------------------------------------  
nextval:                                              ;Start the stack
    push bp                                           ;push base pointer
    push ax                                           ;push ax
;---------------------------------------  
; offset = (*y-1)*30 + (*x-1);
;--------------------------------------- 
calc_offset:                                          ;calculate offset
    xor ax, ax                                        ;make sure ax is 0
    add al, BYTE PTR ds:[si]                          ;move the y value into al

    add bp, ax                                        ;add ax into bp

    mov al, ds:[di]                                   ;move the x value into al
    dec ax                                            ;decrement x

    imul [p0]                                         ;multiply by num columns (30)

    add bp, ax                                        ;add x value into bp
;---------------------------------------  
; if (*direction == 1) goto testn;
; if (*direction == 2) goto teste;
; if (*direction == 3) goto tests;
; if (*direction == 4) goto testw;
;---------------------------------------  
nextval_main:                                        ;decide next value to go to
    cmp BYTE PTR ds:[bx], 3                          ;see if bx is pointing west
    je tests                                         ;if west, go to south
    ja testw                                         ;if north go to west
    cmp BYTE PTR ds:[bx], 2                          ;see if bx is pointting south
    je teste                                         ;if south go east, else go north
;---------------------------------------  
; if (maze[offset-30] == ' ')
;     {
;     *y = *y-1;
;     *x = *x;
;     *direction = 4;
;     return;
;     }
;---------------------------------------  
testn:
    cmp BYTE ptr ds:[bp - 1 - 30], ' '               ;compare to see if north is empty
    jne teste                                        ;if not empty go east
    sub WORD PTR ds:[di], 1                          ;decrement y
    mov BYTE ptr ds:[bx], 4                          ;set travel direction to north
    jmp next_val_exit                                ;exit
;---------------------------------------  
; if (maze[offset+1] == ' ')
;     {
;     *y = *y;
;     *x = *x+1;
;     *direction = 1;
;     return;
;     }
;---------------------------------------  
teste:
    cmp BYTE ptr ds:[bp - 1 + 1], ' '               ;compare to see if east is empty
    jne tests                                       ;if not empty go south
    add WORD PTR ds:[si], 1                         ;increment y
    mov BYTE ptr ds:[bx], 1                         ;set travel direction to east
    jmp next_val_exit                               ;exit
;---------------------------------------  
; if (maze[offset+30] == ' ')
;     {
;     *y = *y+1;
;     *x = *x;
;     *direction = 2;
;     return;
;     }
;---------------------------------------  
tests:
    cmp BYTE ptr ds:[bp - 1 + 30], ' '               ;compare to see if south is empty
    jne testw                                        ;if not empty go west
    add WORD PTR ds:[di], 1                          ;decrement x
    mov BYTE ptr ds:[bx], 2                          ;set travel direction to south
    jmp next_val_exit                                ;exit
;---------------------------------------  
; if (maze[offset-1] == ' ')
;     {
;     *y = *y;
;     *x = *x-1;
;     *direction = 3;
;     return;
;     }
; goto testn;
;---------------------------------------  
testw:
    cmp BYTE ptr ds:[bp - 1 - 1], ' '               ;compare to see if west is empty
    jne testn                                       ;if not empty go north
    sub WORD PTR ds:[si], 1                         ;increment x
    mov BYTE ptr ds:[bx], 3                         ;set travel direction to west
;---------------------------------------  
; remove data from stack
;---------------------------------------  
next_val_exit:                                      ;exit loop
    pop ax                                          ;pop ax
    pop bp                                          ;pop np
    ret                                             ;return
;---------------------------------------  
; end loop
;---------------------------------------  
exit:
    end                               ;add x value into bp