Test date: 03/10/21  16:26:14 
The number of times you used the grading program is 1 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
TABS Grading System Version 4.0
Student: Last=Babb                 First=Mike                 Type=Individual          
Grading and testing history log
       User Test.    Date: 03/10/21  16:25:49  CANTO_5.TXT  testout      
       User Test.    Date: 03/10/21  16:25:52  CANTO_5.TXT  testout      
       User Test.    Date: 03/10/21  16:25:53  CANTO_5.TXT  testout      
       User Test.    Date: 03/10/21  16:25:54  CANTO_5.TXT  testout      
       User Test.    Date: 03/10/21  16:25:55  CANTO_5.TXT  testout      
       User Test.    Date: 03/10/21  16:25:57  CANTO_5.TXT  testout      
       User Test.    Date: 03/10/21  16:25:59  CANTO_5.TXT  testout      
       User Test.    Date: 03/10/21  16:26:01  CANTO_5.TXT  testout      
       User Test.    Date: 03/10/21  16:26:03  CANTO_5.TXT  testout      
       User Test.    Date: 03/10/21  16:26:05  CANTO_5.TXT  testout      
   *** Grading Run.  Date: 03/10/21  16:26:14 
   Running test 01   ...  tabs   gradin.1
   Running test 01A  ...  tabs 6 gradin.1
   Running test 01B  ...  tabs 1 gradin.1
   Running test 02   ...  tabs   gradin.2
   Running test 02A  ...  tabs 5 gradin.2
   Running test 02B  ...  tabs 2 gradin.2
   Running test 03   ...  tabs   gradin.3
   Running test 03A  ...  tabs 7 gradin.3
   Running test 03B  ...  tabs 3 gradin.3
   *** Passed all functional tests
++ Grade ++   60 = Points earned for correct answers.

-> We are now analyzing your source code. You will be graded on
the number of instructions you wrote to solve this problem.
The target for the number of executable instructions written is:
 00 -  30 = 20 points 
 31 -  32 = 15 points 
 33 -  34 = 10 points 
 35 -  36 =  5 points 
 37+      =  0 points 
Your actual counts are:
Lines .......  78    Comments ...  44    Labels .......   5   
Directives ..   5    Variables ..   0    Executables ..  24    McCabe ..   6 
++ Grade ++   20 = Points earned for code written efficiency.  

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0015 The program header format is adequate. 
DOCHB-0.75 Use of code block headers is adequate. 
DOCLC-1.00 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++  100 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
    10  = Number of user tests.                                  
     1  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC<6&}xC86&k~C6&juiC86&zuzC766&Zkyz&jgzk@&69576587&&7<@8<@7:&

Building the file tabs.ans for electronic submission...

;----------------------------------------------
;   Program: tabs.asm (MASM variant whereof)
;   
;   Functionzione:
;                Takes a stream of characters 
;                and outputs every tab therein,
;                expanded as a space'd char,
;                whereof's count is bound by race.  
;                
;                
;   Owner: DvP
;
;   Date: Marz. 9th, 2021
;   Changes: null
;----------------------------------------------
        .model     small; 64k code and 64k data.
        .8086           ; dialect.            
        .stack     256  ; stack sz.
.code
;----------------------------------------------
; main print space body,
; whereof expands the tab,
; by amount equal to,
; tab_amount - counter.
;----------------------------------------------
print_space:
    mov dl, ' '                 ; moves char ' ' into dl.
;----------------------------------------------
print_space_loop:
    int 21h                     ; int'rupt 2 print.
    loopz print_space_loop      ; loop whilst cx != 0

;----------------------------------------------
; main function body;
; reads in the chars,
; transforms if behooveful,
; and prints thereon.
;----------------------------------------------
main_body:
    mov cl, byte ptr es:[82h]   ; reads a command line arg in.
    sub cl, '0'                 ; converts to an int.
    jnc main_loop               ; if the command line arg was 0,
                                ; default to 10;
    mov cl, 10                  ; defs.
;----------------------------------------------
main_loop:
    mov ah, 08h                 ; read from stdin into al, no echo.
    int 21h                     ; int'rupt thereof.
    mov dl, al                  ; copies al to dl.

    mov ah, 02h                 ; code 2 print; will be int'rupt'd later.

    cmp al, 09h                 ; a \t? jmp to print the consonant
    je print_space              ; space count.

    int 21h                     ; int'rupt 2 print.

    cmp al, 0dh                 ; a \n? jmp to reset tab counter.
    je main_body                ; jmping.
    cmp al, 0ah                 ; a \r? jmp to reset tab counter.
    je main_body                ; jmping.
    cmp al, 1ah                 ; a EOF? jmp to done.
    je done                     ; jmping.

    loopnz main_loop            ; loop with the cx variable as counter.
    jmp main_body               ; if cx has gone < 0, reset the counter.

;----------------------------------------------
; the final executor,
; foreswear no hope,
; ye who enter here;
; we've made it!
;----------------------------------------------
done:
    mov ah, 4ch                 ; opcode to exit gracefully.      
    int 21h                     ; the executor of the above,
                                ; a beatitude, grace hereof.
    end main_body               ;
