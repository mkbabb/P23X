Microsoft (R) Macro Assembler Version 6.11		    04/12/21 13:22:03
TESTDRVR.ASM						     Page 1 - 1


				;---------------------------------------------------------------------
				;
				;  Program:      Run Length Coding Driver
				;
				;  Function:     Test driver for the rlc subroutine
				;
				;  Owner:        Dana lasher
				;
				;  Instructions: Start DOSBox and change to the RLC directory
				;  1. Assemble the test driver           ->  ml /c /Zi /Fl testdrvr.asm
				;  2. Assemble your rlc code             ->  ml /c /Zi /Fl rlc.asm
				;  3. Link the test driver and rlc code  ->  link /CO testdrvr rlc;
				;  4. Get the CV configuration file      ->  cvset
				;  5. Start CV                           ->  cv testdrvr
				;  6. Step through the code              ->  use F8 to step through the code
				;
				;  Changes:
				;  Date          Reason
				;  ----          ------
				;  05/17/2017    Original version ... coded to spec design
				;
				;
				;---------------------------------------------------------------------
				         .model    small               ;4 64KB segments
				         .8086                         ;only allow 8086 instructions
				         .stack    256                 ;create a 236 byte stack
				         extrn     _rlc:proc           ;allow linker to access students code


 0000				        .data
				;---------------------------------------------------------------------
				;        This test case draws a staircase     X
				;                                             XX
				;        - test1  is the compressed data      XXX
				;        - output is the decompressed data    XXXX
				;                                             XXXXX
				;                                             XXXXXX
				;                                             XXXXXXX
				;                                             XXXXXXXX
				;                                             XXXXXXXXX
				;                                             XXXXXXXXXX
				;---------------------------------------------------------------------
 0000 01 90 F0 28 0F 03		test1    db    001h, 090h, 0f0h, 028h, 00fh, 003h, 070h, 0f0h, 046h, 00fh
       70 F0 46 0F
 000A  05 50 F0 64 0F 07	         db    005h, 050h, 0f0h, 064h, 00fh, 007h, 030h, 0f0h, 082h, 00fh
       30 F0 82 0F
 0014  09 10 F0 AF 00		         db    009h, 010h, 0f0h, 0afh, 00


 0019  0400 [			output   db        1024 dup('$')
        24
       ]
				;---------------------------------------------------------------------


				;---------------------------------------------------------------------
				;        Initialize the ds register
				;---------------------------------------------------------------------
 0000				         .code                         ;
 0000				start:                                 ;
 0000  B8 ---- R		         mov       ax,@data            ;initialize the
 0003  8E D8			         mov       ds,ax               ;ds register
				;---------------------------------------------------------------------
				;        Call the rlc subroutine
				;        In C the calling sequence is ... rlc (test1, output);
				;---------------------------------------------------------------------
 0005  B8 0019 R		         mov       ax,offset output    ;push the address of
 0008  50			         push      ax                  ; the output buffer
 0009  B8 0000 R		         mov       ax,offset test1     ;push the address of
 000C  50			         push      ax                  ; the input test case buffer
 000D  E8 0000 E		         call      _rlc                ;call the rlc subroutine
				   ;------------------------------------
				   ; Your rlc code will now be executed
				   ;------------------------------------
				;---------------------------------------------------------------------
				;        Display the decompressed data
				;---------------------------------------------------------------------
 0010  BA 0019 R		         mov       dx,offset output    ;point to the output buffer
 0013  B4 09			         mov       ah,9                ;get the DOS string write command
 0015  CD 21			         int       21h                 ;display the output buffer
				;---------------------------------------------------------------------
				;        Terminate
				;---------------------------------------------------------------------
 0017  B8 4C00			         mov       ax,4c00h            ;get the DOS code to terminate
 001A  CD 21			         int       21h                 ;terminate the program
				         end       start               ;the first instruction is start:
 
Microsoft (R) Macro Assembler Version 6.11		    04/12/21 13:22:03
TESTDRVR.ASM						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 0419	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0100	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 001C	  Word	  Public  'CODE'	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
_rlc . . . . . . . . . . . . . .	L Near	 0000	  External
output . . . . . . . . . . . . .	Byte	 0019	  _DATA	
start  . . . . . . . . . . . . .	L Near	 0000	  _TEXT	
test1  . . . . . . . . . . . . .	Byte	 0000	  _DATA	

	   0 Warnings
	   0 Errors
