Microsoft (R) Macro Assembler Version 6.11		    04/12/21 16:53:37
rlc.asm							     Page 1 - 1


				;---------------------------------------------------------------------
				;  Program:      Run Length Coding
				;
				;  Function:     Decompresses 1 dimensional run lengths
				;                This subroutine links with a C main program
				;
				;                This subroutine performs the functions necessary to
				;                decompress the exisiting RLC representation.
				;                
				;                INPUT:
				;                -   a pointer to compressed data containg contating 
				;                    strings of runs and feature
				;                -   a pointer to a buffer to store decompressed data
				;                
				;                OUTPUT:
				;                -   decompressed data in the input buffer pointer
				;                -   restored C registers 
				;
				;  Owner:        mbabb, scheerl
				;
				;  Changes:      Added all data code, last 2 lines of _rlc and 
				;                everything else except exit
				;
				;  Date          Reason
				;  ----          ------
				;  05/16/2017    Original version ... coded to spec design
				;  03/12/2021    Added program functionality
				;---------------------------------------------------------------------
				         .model    small
				         .8086
				         public    _rlc
				;---------------------------------------
 0000				         .data                         ;start the data segment
				;---------------------------------------
 0000  0002 [			    run         db 2 dup (?)         
        00
       ]
 0002 50			    pels_left   db 80                  ;set pels left to 80
 0003 DB			    black db 219                       ;set black to 219
 0004 20			    cur db 32                          ;set white to 32
				;---------------------------------------
 0000				         .code                         ;start the code segnment
				;---------------------------------------
				; Save the registers ... 'C' requires (bp,si,di)
				; Access the input and output lists
				; pels_left = 80;
				; cur = wh;
				;---------------------------------------
 0000				_rlc:                                  
 0000  55			    push      bp                       ;save 'C' register
 0001  8B EC			    mov       bp,sp                    ;set bp to point to stack
 0003  56			    push      si                       ;save 'C' register
 0004  57			    push      di                       ;save 'C' register
 0005  8B 76 04			    mov       si, [bp + 4]             ;si points to the input compressed data
 0008  8B 7E 06			    mov       di, [bp + 6]             ;di points to the empty output buffer
 000B  8C D8			    mov ax, ds                         ;move ds to ax
 000D  8E C0			    mov es, ax                         ;move ax into extra segment
				;---------------------------------------
				; the main loop of the subroutine
				; while(1) {
				; code = *comp;
				; comp++;
				; if ( code == 0 ) return(0);
				; run[0] = (unsigned char)(code >> 4)
				; run[1] = (unsigned char)(code << 4)
				;---------------------------------------
 000F				main_body:
 000F  AC			    lodsb                              ;mov al, increment si
 0010  3C 00			    cmp al, 0                          ;compare al to 0
 0012  74 53			    je exit                            ;if 0 jump to exit loop
 0014  A2 0000 R		    mov [run], al                      ;move al into run
 0017  A2 0001 R		    mov [run + 1], al                  ;move al into run + 1
 001A  B1 04			    mov cl, 4                          ;move cl into 4
 001C  D2 2E 0000 R		    shr [run], cl                      ;shift right run by 4
 0020  80 26 0001 R 0F		    and [run + 1], 0fh                 ;clear high order bits of run + 1
 0025  33 DB			    xor bx, bx                         ;set bx to 0
 0027  33 C9			    xor cx, cx                         ;set cx to 0
 0029  A0 0004 R		    mov al, [cur]                      ;move cur to al
 002C  E8 0009			    call for_looper                    ;call for looper subroutine
 002F  43			    inc bx                             ;increment bx by 1
 0030  E8 0005			    call for_looper                    ;call for looper subroutine again
 0033  A2 0004 R		    mov [cur], al                      ;move al into cur
 0036  EB D7			    jmp main_body                      ;start main loop again
				;---------------------------------------
				; for loop sub routine
				; for ( i = 0; i < 2; i++ )
				;---------------------------------------
 0038				for_looper:
 0038  80 3E 0002 R 00		    cmp [pels_left], 0                 ;compare pels left to 0
 003D  75 0C			    jne run_test                       ;if not 0 jump to run test
 003F  C6 06 0002 R 50		    mov [pels_left], 80                ;move 80 into pels left
 0044  B0 20			    mov al, 32                         ;move 32 into al
 0046  C6 06 0003 R DB		    mov [black], 219                   ;move 219 into black
				;---------------------------------------
				; run test loop to do if else statements
				; from c psuedo code
				; if i = 0   dl = [run+0]
				; if i = 1   dl = [run+1]
				;---------------------------------------
 004B				run_test:
 004B  80 BF 0000 R 0F		    cmp [run + bx], 15                 ;compare to see if run[bx] is 15
 0050  74 06			    je run_test_if                     ;if so jump to run_test_if
 0052  8A 8F 0000 R		    mov cl, [run + bx]                 ;move run[bx] to cl
 0056  EB 04			    jmp while_loop_test                ;jump to while_loop_test
				;---------------------------------------
				; move pels left into cl
				; if ( pels_left == 0 ) {
				; pels_left = 80;
				; cur = wh;
				; }
				;---------------------------------------
 0058				run_test_if:
 0058  8A 0E 0002 R		    mov cl, [pels_left]                ;move pels left into cl
				;---------------------------------------
				; decrement pels left by cl
				; if ( run[i] == 15) len = pels_left;
				; else len = run[i];
				;---------------------------------------
 005C				while_loop_test:
 005C  28 0E 0002 R		    sub [pels_left], cl                ;decrement pels left by cl
				;---------------------------------------
				; do inner while loop
				; while ( len > 0 )
				; *dcomp = cur;
				; dcomp ++;
				; len--;
				; pels_left--;
				;---------------------------------------
 0060				while_loop: 
 0060  F3/ AA			    rep stosb                          ;increment curr pointer, decrement len and pels left all by 1
				;---------------------------------------
				; cur test loop exchange black into al
				; if ( cur == wh ) cur = bl;
				; else cur = wh;
				;---------------------------------------
 0062				cur_test:
 0062  86 06 0003 R		    xchg al, [black]                   ;swap black into al
 0066  C3			    ret                                ;return
				;---------------------------------------
				; Restore registers and return
				;---------------------------------------
 0067				exit:                             
 0067  5F			    pop       di                       ;restore 'C' register
 0068  5E			    pop       si                       ;restore 'C' register
 0069  5D			    pop       bp                       ;restore 'C' register
 006A  C3			    ret                                ;return
				;---------------------------------------
				    end                           ;end

 
Microsoft (R) Macro Assembler Version 6.11		    04/12/21 16:53:37
rlc.asm							     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 0005	  Word	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	16 Bit	 006B	  Word	  Public  'CODE'	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
_rlc . . . . . . . . . . . . . .	L Near	 0000	  _TEXT	Public
black  . . . . . . . . . . . . .	Byte	 0003	  _DATA	
cur_test . . . . . . . . . . . .	L Near	 0062	  _TEXT	
cur  . . . . . . . . . . . . . .	Byte	 0004	  _DATA	
exit . . . . . . . . . . . . . .	L Near	 0067	  _TEXT	
for_looper . . . . . . . . . . .	L Near	 0038	  _TEXT	
main_body  . . . . . . . . . . .	L Near	 000F	  _TEXT	
pels_left  . . . . . . . . . . .	Byte	 0002	  _DATA	
run_test_if  . . . . . . . . . .	L Near	 0058	  _TEXT	
run_test . . . . . . . . . . . .	L Near	 004B	  _TEXT	
run  . . . . . . . . . . . . . .	Byte	 0000	  _DATA	
while_loop_test  . . . . . . . .	L Near	 005C	  _TEXT	
while_loop . . . . . . . . . . .	L Near	 0060	  _TEXT	

	   0 Warnings
	   0 Errors
